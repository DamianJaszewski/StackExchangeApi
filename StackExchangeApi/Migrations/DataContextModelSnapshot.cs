// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StackExchangeApi;

#nullable disable

namespace StackExchangeApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StackExchangeApi.Models.Collective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "slug");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "tags");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Collectives");

                    b.HasAnnotation("Relational:JsonPropertyName", "collectives");
                });

            modelBuilder.Entity("StackExchangeApi.Models.ExternalLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectiveId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "link");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("CollectiveId");

                    b.ToTable("ExternalLinks");

                    b.HasAnnotation("Relational:JsonPropertyName", "external_links");
                });

            modelBuilder.Entity("StackExchangeApi.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "count");

                    b.Property<bool>("HasSynonyms")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "has_synonyms");

                    b.Property<bool>("IsModeratorOnly")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "is_moderator_only");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "is_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("RootId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("Items");

                    b.HasAnnotation("Relational:JsonPropertyName", "items");
                });

            modelBuilder.Entity("StackExchangeApi.Models.Root", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasMore")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "has_more");

                    b.Property<int>("QuotaMax")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "quota_max");

                    b.Property<int>("QuotaRemaining")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "quota_remaining");

                    b.HasKey("Id");

                    b.ToTable("Roots");
                });

            modelBuilder.Entity("StackExchangeApi.Models.Collective", b =>
                {
                    b.HasOne("StackExchangeApi.Models.Item", "Item")
                        .WithMany("Collectives")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("StackExchangeApi.Models.ExternalLink", b =>
                {
                    b.HasOne("StackExchangeApi.Models.Collective", "Collective")
                        .WithMany("ExternalLinks")
                        .HasForeignKey("CollectiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collective");
                });

            modelBuilder.Entity("StackExchangeApi.Models.Item", b =>
                {
                    b.HasOne("StackExchangeApi.Models.Root", "Root")
                        .WithMany("Items")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Root");
                });

            modelBuilder.Entity("StackExchangeApi.Models.Collective", b =>
                {
                    b.Navigation("ExternalLinks");
                });

            modelBuilder.Entity("StackExchangeApi.Models.Item", b =>
                {
                    b.Navigation("Collectives");
                });

            modelBuilder.Entity("StackExchangeApi.Models.Root", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
